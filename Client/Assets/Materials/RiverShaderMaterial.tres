[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;
render_mode depth_draw_always, specular_schlick_ggx, cull_disabled;

uniform sampler2D normal_texture : hint_normal; 

varying vec3 color;

// https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83
vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}
vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}

float snoise(vec3 v){ 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //  x0 = x0 - 0. + 0.0 * C 
  vec3 x1 = x0 - i1 + 1.0 * C.xxx;
  vec3 x2 = x0 - i2 + 2.0 * C.xxx;
  vec3 x3 = x0 - 1. + 3.0 * C.xxx;

// Permutations
  i = mod(i, 289.0 ); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients
// ( N*N points uniformly over a square, mapped onto an octahedron.)
  float n_ = 1.0/7.0; // N=7
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
}

struct GerstnerParameters {
    float Amplitude;
    float Phase;
    vec2 Propagation;
};

// https://en.wikipedia.org/wiki/Trochoidal_wave
const GerstnerParameters gerstners[2] = GerstnerParameters[](
    GerstnerParameters(0.35, 0.0, vec2(0.0, 0.45)),
	GerstnerParameters(0.125, 1.05, vec2(0.125, 0.4))
);

const float WAVE_DEPTH = 8.0;
const int PARAMETERS = 2;
const float TIME_SCALE = 4.0;

vec3 gerstnerComponent(vec2 surface, int i) {
    GerstnerParameters p = gerstners[i];
    float k = length(p.Propagation);
    float th_kd = tanh(k * WAVE_DEPTH);
    float pulsation = sqrt(9.81 * k * th_kd);
    float angle = dot(surface, p.Propagation) - pulsation * float(TIME)/TIME_SCALE - p.Phase;

    vec2 xz = (p.Propagation / k) * (p.Amplitude / th_kd) * sin(angle);

    return vec3(
        -xz.x,
        p.Amplitude * cos(angle),
        -xz.y
    );
}

vec3 gerstnerTrochoidal(vec2 surface, out vec3 normal, out vec3 tangent) {
    vec3 pos = vec3(surface.x, 0.0, surface.y);
    vec3 ddx = vec3(1.0, 0.0, 0.0);
    vec3 ddz = vec3(0.0, 0.0, 1.0);
    vec3 tan = vec3(0.0, 0.0, 0.0);
    for (int i = 0; i < PARAMETERS; i++) {
        vec3 comp = gerstnerComponent(surface, i);
        pos += comp;
        ddx += comp * gerstners[i].Propagation.x;
        ddz += comp * gerstners[i].Propagation.y;
    }
    normal = normalize(cross(ddz, ddx));
    tangent = normalize(ddx+ddz);
    return pos;
}

const float FINITE_DIFF_H = 0.0625;
const float NOISE_STR = 0.25;

varying vec3 normal_vector;

void vertex() {
	VERTEX = gerstnerTrochoidal(VERTEX.xz, NORMAL, TANGENT);
	
	float displacement = snoise(vec3(VERTEX.xz/24.0, TIME/4.0));
	VERTEX.y += displacement*NOISE_STR;
	
	float dx = (snoise(
        vec3(VERTEX.xz/24.0 + vec2(FINITE_DIFF_H, 0.0), TIME/4.0)) - displacement)/
        FINITE_DIFF_H;
    float dz = (snoise(
        vec3(VERTEX.xz/24.0 + vec2(0.0, FINITE_DIFF_H), TIME/4.0)) - displacement)/
        FINITE_DIFF_H;
    vec3 noiseNormal = normalize(vec3(-dx, 1, -dz));
    vec3 noiseTangent = normalize(vec3(FINITE_DIFF_H, dx, 0.0) + vec3(0.0, dz, FINITE_DIFF_H));
	
	NORMAL = NORMAL + noiseNormal*NOISE_STR/2.0;
	TANGENT = TANGENT + noiseTangent*NOISE_STR/2.0;
	
	normal_vector = NORMAL;
}

void fragment() {
	float depth_tex = textureLod(DEPTH_TEXTURE, SCREEN_UV, 0.0).r;
	float depth_tex_unpacked = depth_tex * 2.0 - 1.0;
	float surface_dist = PROJECTION_MATRIX[3][2] / (depth_tex_unpacked + PROJECTION_MATRIX[2][2]);
	float water_depth = surface_dist + VERTEX.z;
	
	//NORMAL = normalize(normal_vector);
	
	NORMAL += 0.125 * texture(normal_texture, UV*8.0).gbr;
	
	//float fresnelFactor = 1.0 - pow(max(dot(VIEW, normal), 0.0), 1.0);
	
	SPECULAR = 0.25;
	ROUGHNESS = 0.6;
	//METALLIC = 0.0;
	ALBEDO = vec3(0.05, 0.1, 0.6)*0.5;
}"
